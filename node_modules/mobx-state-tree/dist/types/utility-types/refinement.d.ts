import { INode, Type, IContext, IValidationResult, IAnyType, ExtractC } from "../../internal";
export declare class Refinement<C, S, T> extends Type<C, S, T> {
    readonly type: IAnyType;
    readonly predicate: (v: any) => boolean;
    readonly message: (v: any) => string;
    readonly flags: number;
    readonly shouldAttachNode: boolean;
    constructor(name: string, type: IAnyType, predicate: (v: any) => boolean, message: (v: any) => string);
    describe(): string;
    instantiate(parent: INode, subpath: string, environment: any, value: any): INode;
    isAssignableFrom(type: IAnyType): boolean;
    isValidSnapshot(value: any, context: IContext): IValidationResult;
}
export declare function refinement<IT extends IAnyType>(name: string, type: IT, predicate: (snapshot: ExtractC<IT>) => boolean, message?: string | ((v: any) => string)): IT;
export declare function refinement<IT extends IAnyType>(type: IT, predicate: (snapshot: ExtractC<IT>) => boolean, message?: string | ((v: any) => string)): IT;
export declare function isRefinementType<IT extends IAnyType>(type: IT): type is IT;
