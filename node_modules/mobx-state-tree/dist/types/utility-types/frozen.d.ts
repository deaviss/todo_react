import { INode, Type, IContext, IValidationResult, TypeFlags, ObjectNode, IType, IAnyType } from "../../internal";
export declare class Frozen<T> extends Type<T, T, T> {
    private subType?;
    readonly shouldAttachNode: boolean;
    flags: TypeFlags;
    constructor(subType?: IAnyType | undefined);
    describe(): string;
    instantiate(parent: ObjectNode | null, subpath: string, environment: any, value: any): INode;
    isValidSnapshot(value: any, context: IContext): IValidationResult;
}
export declare function frozen<C>(subType: IType<C, any, any>): IType<C, C, C>;
export declare function frozen<T>(defaultValue: T): IType<T | undefined | null, T, T> & {
    flags: TypeFlags.Optional;
};
export declare function frozen<T = any>(): IType<T, T, T>;
export declare function isFrozenType<IT extends IType<T | any, T, T>, T = any>(type: IT): type is IT;
