import { ObjectNode, IChildNodesMap, IAnyType } from "../../internal";
export declare enum NodeLifeCycle {
    INITIALIZING = 0,
    CREATED = 1,
    FINALIZED = 2,
    DETACHING = 3,
    DEAD = 4
}
export interface INode {
    readonly type: IAnyType;
    readonly storedValue: any;
    readonly path: string;
    readonly isRoot: boolean;
    readonly parent: ObjectNode | null;
    readonly root: ObjectNode;
    readonly _environment: any;
    subpath: string;
    isAlive: boolean;
    readonly value: any;
    readonly snapshot: any;
    setParent(newParent: ObjectNode | null, subpath?: string | null): void;
    die(): void;
}
export interface IStateTreeNode<C = any, S = any> {
    readonly $treenode?: any;
    readonly $creationType?: C;
    readonly $snapshotType?: S;
}
export interface IAnyStateTreeNode extends IStateTreeNode<any, any> {
}
export interface IMembers {
    properties: {
        [name: string]: IAnyType;
    };
    actions: Object;
    views: Object;
    volatile: Object;
}
/**
 * Returns true if the given value is a node in a state tree.
 * More precisely, that is, if the value is an instance of a
 * `types.model`, `types.array` or `types.map`.
 *
 * @export
 * @param {*} value
 * @returns {value is IStateTreeNode}
 */
export declare function isStateTreeNode<C = any, S = any>(value: any): value is IStateTreeNode<C, S>;
export declare function getStateTreeNode(value: IAnyStateTreeNode): ObjectNode;
export declare function canAttachNode(value: any): boolean;
export declare function toJSON<S>(this: IStateTreeNode<any, S>): S;
export declare function getRelativePathBetweenNodes(base: ObjectNode, target: ObjectNode): string;
export declare function resolveNodeByPath(base: ObjectNode, pathParts: string): INode;
export declare function resolveNodeByPath(base: ObjectNode, pathParts: string, failIfResolveFails: boolean): INode | undefined;
export declare function resolveNodeByPathParts(base: ObjectNode, pathParts: string[]): INode;
export declare function resolveNodeByPathParts(base: ObjectNode, pathParts: string[], failIfResolveFails: boolean): INode | undefined;
export declare function convertChildNodesToArray(childNodes: IChildNodesMap | null): INode[];
